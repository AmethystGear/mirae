import os
import glob

this_class_is_auto_generated = "\n/*** THIS CLASS IS AUTO GENERATED BY compile_server.py. CHANGES TO THIS WILL NOT BE SAVED. ***/\n"

# remove all .class files in server
classfiles = glob.glob('server/**/*.class', recursive=True)
for file in classfiles:
    os.remove(file)

# generate code for Actions.java file
# this is done so that Actions.java contains an array
# that has all of the action classes in it.
actions_file = open("server/actions/Actions.java", "w")
actions = glob.glob('server/actions/*.java', recursive=True)

actions_file.write("package server.actions;\n")
actions_file.write(this_class_is_auto_generated)
actions_file.write("// This class contains all the actions in the actions folder. This allows us to easily iterate over every action.\n")
actions_file.write("public class Actions {\n")
actions_file.write("\t// array containing all the actions.\n");
actions_file.write("\tpublic static final Action[] actions = new Action[] {\n")

for action in actions:
    className = os.path.splitext(os.path.basename(action))[0]
    if((className != "Actions") and (className != "Action")):
        actions_file.write("\t\tnew " + className  + "(),\n")

actions_file.write("\t};\n")
actions_file.write("}\n")
actions_file.close()

# generate code for Instantiables.java file
# this is done so that Instantiables.java contains a map from strings to objects that implement
# the instantiable interface.
instantiables_file = open("server/objects/Instantiables.java", "w")
instantiables = glob.glob('server/objects/instantiables/*.java', recursive=True)

instantiables_file.write("package server.objects;\n\n")
instantiables_file.write("import java.util.Map;\n")
instantiables_file.write("import java.util.HashMap;\n")
instantiables_file.write("import java.util.Collections;\n")
instantiables_file.write("import server.objects.instantiables.*;\n\n")

instantiables_file.write(this_class_is_auto_generated)
instantiables_file.write("// This class contains a map from the strings of each class to the objects they represent.\n")
instantiables_file.write("// This allows us to get instantiable classes by their strings.\n")
instantiables_file.write("public class Instantiables {\n")
instantiables_file.write("\tpublic static final Map<String, Object> instantiables;\n")
instantiables_file.write("\tstatic {\n")
instantiables_file.write("\t\tMap<String, Object> map = new HashMap<String, Object>();\n")
for instantiable in instantiables:
    className = os.path.splitext(os.path.basename(instantiable))[0]
    instantiables_file.write("\t\tmap.put(\"" + className.lower() + "\", new " + className + "());\n")

instantiables_file.write("\t\tinstantiables = Collections.unmodifiableMap(map);\n")
instantiables_file.write("\t}\n")
instantiables_file.write("}\n")
instantiables_file.close()

# add all .java files to the temp file class_list
files = glob.glob('server/**/*.java', recursive=True)
class_list = open("temp-classes.txt", "w")
for file in files:
    class_list.write(file + " ")
class_list.close()

# compile the server using the temp file with the class list
os.system("javac @temp-classes.txt")
# remove the temp file so it doesn't clutter the workspace
os.remove("temp-classes.txt")
