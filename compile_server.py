import os
import glob

# remove all .class files in server
classfiles = glob.glob('server/*.class', recursive=True)
for file in classfiles:
    os.remove(file)

# rewrite Actions.java file
# this is done so that Actions.java contains an array
# that has all of the action classes in it.
actions_file = open("server/actions/Actions.java", "w")
actions = glob.glob('server/actions/*.java', recursive=True)

actions_file.write("package server.actions;\n")
actions_file.write("\n/*** THIS CLASS IS AUTO GENERATED BY compile_server.py. CHANGES TO THIS WILL NOT BE SAVED. ***/\n")
actions_file.write("// This class contains all the actions in the actions folder. This allows us to easily iterate over every action.\n")
actions_file.write("public class Actions {\n")
actions_file.write("\t// array containing all the actions.\n");
actions_file.write("\tpublic static final Action[] actions = new Action[] {\n")

for action in actions:
    className = os.path.splitext(os.path.basename(action))[0]
    if((className != "Actions") and (className != "Action")):
        actions_file.write("\t\tnew " + className  + "(),\n")

actions_file.write("\t};\n")
actions_file.write("}\n")
actions_file.close()

# add all .java files to the temp file class_list
files = glob.glob('server/**/*.java', recursive=True)
class_list = open("temp-classes.txt", "w")
for file in files:
    class_list.write(file + " ")
class_list.close()

# compile the server using the temp file with the class list
os.system("javac @temp-classes.txt")
# remove the temp file so it doesn't clutter the workspace
os.remove("temp-classes.txt")
